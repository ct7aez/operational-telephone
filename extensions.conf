[general]
static=yes
writeprotect=no
clearglobalvars=no
[globals]
CONSOLE=Console/dsp				; Console interface for demo
IAXINFO=guest					; IAXtel username/password
TRUNK=DAHDI/G2					; Trunk interface
TRUNKMSD=1					; MSD digits to strip (usually 1 or 0)

PEDRO=SIP/pedro_soft
CLAUDIO=SIP/claudio_soft
JOAO=SIP/joao_soft
PAULO=SIP/paulo_soft

CCOTRAFFIC=SIP/00156543c175
PK1=SIP/000b8244c40c
PK2=SIP/000b823ede27
PK3=SIP/000b823f6ea8
PK4=SIP/000b8244c346
PN1=SIP/e437d71015da
PN2=SIP/e437d71015c8
PN3=SIP/e437d7101598
PN4=SIP/e437d71015d9
CHE3=SIP/7c1eb300cb5d
testeiter=1999			;1999 só liga para est || 2999 liga est e pn
SONORIDPRIOR=1000

[omnibus]

;Plano de numeração
;desguarnecer			eclip
;Guarnecer			guarn
;liga ascendente		jusan
;liga descendente		monta
;liga PN's ascendente		pnjusan
;liga PN's descendentes		pnmonta
;liga estações adjacentes	testa
;liga emergencia/prioridade	sosintercom
;liga anuncio manual/prioridade	anunman
;a tecla de desguarnecer/guarnecer marcará a extenção obtida do callerID escreve na base de dados 1XXX é o numero de Ordem.
;as PN's são referenciadas por 2XXX mantendo o numero de oredem em XXX
;gravações em /var/spool/asterisk/monitor
;TODO Activar escuta da supervisão de qq canal
;TODO Sonorização a partir da supervisão
;TODO Escuta da sonorização pela supervisão
;TODO colocar a palavra "EMER" no caller ID ao realizar chamada de emergencia???
;TODO retenção de chamada no posto de supervisão

exten => s,1,Answer()
same => n,background(enter-ext-of-person)
same => n,WaitExten(5)

exten => i,1,Playback(pbx-invalid)
same = n,Goto(omnibus,s,1)

exten => t,1,Playback(vm-goodbye)
same => n,Hangup()

exten => u,1,Playback(vm-isunavail)
same => n,Goto(omnibus,s,1)

exten => _71XXX,1,GoSub(omnibus-guarnecer,s,1())		;TODO mudar as extenções para alfa
exten => _70XXX,1,GoSub(omnibus-desguarnecer,s,1())
exten => _72XXX,1,GoSub(omnibus-ascendente,s,1(1${EXTEN:2}))	;TODO limpar os argumentos...
exten => _73XXX,1,GoSub(omnibus-descendente,s,1(1${EXTEN:2}))
exten => _74XXX,1,GoSub(omnibus-conf-ascendente,s,1())
exten => _75XXX,1,GoSub(omnibus-conf-descendente,s,1())
exten => _76XXX,1,GoSub(omnibus-pn-conf,s,1())
exten => emerg,1,GoSub(omnibus-sos,s,1())			;TODO criar chamada de emergencia prioritária com paging e em modo intercom. Para telefones de via e para implementação geral
exten => sonor,1,GoSub(omnibus-sonor,s,1())			;sonorização para a supervisão
exten => _3XXX,1,GoSub(omnibus-sonor,${EXTEN},1())		;sonorização para as estações
exten => escut/1000,1,GoSub(omnibus-escut,s,1())		;spy

exten => 81000,hint,${CCOTRAFFIC}	;hint para as teclas de cada estação/PN traduz exten para device
exten => 81003,hint,${PK1}
exten => 81012,hint,${PK2}
exten => 81018,hint,${PK3}
exten => 81024,hint,${PK4}
exten => 82006,hint,${PN1}
exten => 82009,hint,${PN2}		
exten => 82015,hint,${PN3}
exten => 82021,hint,${PN4}
exten => 83018,hint,${CHE3}		;CHE = CHave de Eclipse

exten => 71000,hint,Custom:login1000	;hint para a tecla "Guarnecido"
exten => 71003,hint,Custom:login1003
exten => 71006,hint,Custom:login2006
exten => 71009,hint,Custom:login2009
exten => 71012,hint,Custom:login1012
exten => 71015,hint,Custom:login2015
exten => 71018,hint,Custom:login1018
exten => 71021,hint,Custom:login2021
exten => 71024,hint,Custom:login1024

exten => 70000,hint,Custom:logout1000	;hint para a tecla "Desguarnecido"
exten => 70003,hint,Custom:logout1003
exten => 70006,hint,Custom:logout2006
exten => 70009,hint,Custom:logout2009
exten => 70012,hint,Custom:logout1012
exten => 70015,hint,Custom:logout2015
exten => 70018,hint,Custom:logout1018
exten => 70021,hint,Custom:logout2021
exten => 70024,hint,Custom:logout1024

exten => 1000,hint,Custom:toggle1000	;hint para a tecla toggle "Desguarnecido" "Guarnecido" a implementar nos modulos de teclas
exten => 1003,hint,Custom:toggle1003	;TODO mudar para o plano de numeração normalmente implementado. Pode conviver com o dialplan "core" usando regex em baixo.
exten => 2006,hint,Custom:toggle2006
exten => 2009,hint,Custom:toggle2009
exten => 1012,hint,Custom:toggle1012
exten => 2015,hint,Custom:toggle2015
exten => 1018,hint,Custom:toggle1018
exten => 2021,hint,Custom:toggle2021
exten => 1024,hint,Custom:toggle1024
exten => 3018,hint,Custom:toggle3018


exten => 1000,1,Answer()
same => n,GoSub(recordcall,s,1())
same => n,Dial(${CCOTRAFFIC},90)
same => n,GotoIf($["${DEVICE_STATE(${CCOTRAFFIC})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Progress()
same => n,Hangup()

exten => 1003,1,Answer()
same => n,GoSub(recordcall,s,1())
same => n,Dial(${PK1},90)
same => n,GotoIf($["${DEVICE_STATE(${PK1})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Progress()
same => n,Hangup()

exten => 1012,1,Answer()
same => n,GoSub(recordcall,s,1())
same => n,Dial(${PK2},90)
same => n,GotoIf($["${DEVICE_STATE(${PK2})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Progress()
same => n,Hangup()

exten => 1018,1,Answer()
same => n,GoSub(recordcall,s,1())
same => n,Dial(${PK3},90)
same => n,GotoIf($["${DEVICE_STATE(${PK3})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Progress()
same => n,Hangup()

exten => 1024,1,Answer()
same => n,GoSub(recordcall,s,1())
same => n,Dial(${PK4},90)
same => n,GotoIf($["${DEVICE_STATE(${PK4})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Progress()
same => n,Hangup()

exten => 2006,1,Answer()
same => n,GoSub(recordcall,s,1())
same => n,Dial(${PN1},90)
same => n,GotoIf($["${DEVICE_STATE(${PN1})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Progress()
same => n,Hangup()

exten => 2009,1,Answer()
same => n,GoSub(recordcall,s,1())
same => n,Dial(${PN2},90)
same => n,GotoIf($["${DEVICE_STATE(${PN2})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Progress()
same => n,Hangup()

exten => 2015,1,Answer()
same => n,GoSub(recordcall,s,1())
same => n,Dial(${PN3},90)
same => n,GotoIf($["${DEVICE_STATE(${PN3})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Progress()
same => n,Hangup()

exten => 2021,1,Answer()
same => n,GoSub(recordcall,s,1())
same => n,Dial(${PN4},90)
same => n,GotoIf($["${DEVICE_STATE(${PN4})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Progress()
same => n,Hangup()

[recordcall]
exten => s,1,Set(filevarname=${CHANNEL(from)}-${CALLERID(all)})		;TODO definir o nome de ficheiro
same => n,MixMonitor(${filevarname}.wav)
same => n,Return()

[omnibus-guarnecer]
exten => s,1,Verbose(2,A guarnecer a estação/PN  peername -> ${CHANNEL(peername)} uri -> ${CHANNEL(uri)} from -> ${CHANNEL(from)} na extensão -> ${CALLERID(num)})	;TODO limpar
same => n,Set(DEVICE_STATE(Custom:login${CALLERID(num)})=BUSY)
same => n,Set(DEVICE_STATE(Custom:logout${CALLERID(num)})=NOT_INUSE)
same => n,Set(DEVICE_STATE(Custom:toggle${CALLERID(num)})=RINGING)
same => n,Set(peername=${CALLERID(num)})
same => n,Set(DB(omnibus/${peername})=${peername})
same => n,Playback(silence/1&agent-loginok)
same => n,Hangup()

[omnibus-desguarnecer]
exten => s,1,Verbose(2,A desguarnecer a estação/PN  peername -> ${CHANNEL(peername)} uri -> ${CHANNEL(uri)} from -> ${CHANNEL(from)} na extensão -> ${CALLERID(num)})	;TODO limpar
same => n,Set(DEVICE_STATE(Custom:login${CALLERID(num)})=NOT_INUSE)
same => n,Set(DEVICE_STATE(Custom:logout${CALLERID(num)})=BUSY)
same => n,Set(DEVICE_STATE(Custom:toggle${CALLERID(num)})=BUSY)
same => n,Set(peername=${CALLERID(num)})
same => n,Set(DB(omnibus/${peername})=UNAVAIL)
same => n,Playback(silence/1&agent-loggedoff)
same => n,Hangup()

[omnibus-ascendente]
exten => s,1,Verbose(2,A ligar para estação na direcção ascendente)
same => n,Set(exte=${CALLERID(num)})
same => n(inc),Set(exte=$[${exte}+1])
same => n(test),GotoIf($[${exte} > ${testeiter}]?omnibus,u,1:)	;testa numero máximo de iterações para não pendurar 1999 só liga para est 3000 liga est e pn
same => n,Set(state=${DB(omnibus/${exte})})
same => n,Set(statethis=${DB_EXISTS(omnibus/${exte})})
same => n,GotoIf($[${statethis}]?:inc)
same => n,GotoIf($[${state} = UNAVAIL]?inc:omnibus,${exte},1)

[omnibus-descendente]
exten => s,1,Verbose(2,A ligar para estação na direcção descendente)
same => n,Set(exte=${CALLERID(num)})
same => n(dec),Set(exte=$[${exte}-1])
same => n(test),GotoIf($[${exte} < 1000]?omnibus,u,1:)	;testa numero máximo de iterações para não pendurar
same => n,Set(state=${DB(omnibus/${exte})})
same => n,Set(statethis=${DB_EXISTS(omnibus/${exte})})
same => n,GotoIf($[${statethis}]?:dec)
same => n,GotoIf($[${state} = UNAVAIL]?dec:omnibus,${exte},1)

[omnibus-conf-ascendente]
exten => s,1,Verbose(2,A ligar PN's na direcção ascendente)
same => n,Set(exte_pn_init=$[${CALLERID(num)}+1000])			;+1000 para procurar no dominio do dialplan das PN's
same => n,Set(exte_est=${CALLERID(num)})				;criação de variavel para procurar no dominio do dialplan das estações (de onde a chamada tem de obrigatóriamente ser iniciada) 
same => n(inc),Set(exte_est=$[${exte_est}+1])
same => n(test_est),GotoIf($[${exte_est} > 2000]?makeconf:)		;testa numero máximo de iterações para não pendurar 1999 só liga para est 3000 liga est e pn
same => n,Set(state=${DB(omnibus/${exte_est})})
same => n,Set(statethis=${DB_EXISTS(omnibus/${exte_est})})
same => n,Gotoif($[${statethis}]?:inc)					;se NÃO existe incrementa
same => n,GotoIf($[${state} = UNAVAIL]?inc:)				;se NÃO disponivel incrementa
same => n,Set(deviceadd=${HINT(8${exte_est}@omnibus)}&)			;comentar para não integrar a prox estação guarnecida
same => n(makeconf),Set(exte_pn_max=$[${exte_est}+1000])		;define o intrevalo de procura de PN's guarnecidas entre ${exte_pn_init} e ${exte_pn_max}
									;ultima estação guarnecida detectada e intervalo de num pn estabelecido
same => n(incpn),Set(exte_pn_init=$[${exte_pn_init}+1])
same => n(test_pn),GotoIf($[${exte_pn_init} > 3000]?doit:)		;testa numero máximo de iterações para não pendurar 1999 só liga para est 3000 liga est e pn
same => n,Set(comp=$[${exte_pn_init} <= ${exte_pn_max}])
same => n,GotoIf(${comp})?:doit)					;salta do ciclo de inc
same => n,GotoIf($[${DB_EXISTS(omnibus/${exte_pn_init})}])?:incpn)	;se NÃo existe incrementa e menor que pn_max
same => n,GotoIf($[${DB(omnibus/${exte_pn_init})}= UNAVAIL])?incpn:)	;se NÃO disponivel incrementa
same => n,Set(deviceadd=${deviceadd}${HINT(8${exte_pn_init}@omnibus)}&)
same => n,NoOp(limite max ${exte_pn_max} limite minimo ${exte_pn_init})
same => n,Set(comp=$[${exte_pn_init} <= ${exte_pn_max}])
same => n,GotoIf(${comp})?incpn:)
same => n(doit),Set(strip=$[${LEN(${deviceadd})} - 1])			;retira o ultimo & da string para não criar erros na app page
same => n,GotoIf($[${strip} < 5])?omnibus,u,1:)
same => n,Set(deviceadd=${deviceadd:0:${strip}})
same => n,Answer()
same => n,Progress()
same => n,Page(${deviceadd},dri,60)					;TODO definir o nome da gravação da app page
same => n,Hangup()

[omnibus-conf-descendente]
exten => s,1,Verbose(2,A ligar PN's na direcção descendente)
same => n,Set(exte_pn_init=$[${CALLERID(num)}+1000])
same => n,Set(exte_est=${CALLERID(num)})
same => n(dec),Set(exte_est=$[${exte_est}-1])
same => n(test_est),GotoIf($[${exte_est} < 1000]?makeconf:)		;testa numero máximo de iterações para não pendurar 1999 só liga para est 3000 liga est e pn
same => n,Set(state=${DB(omnibus/${exte_est})})
same => n,Set(statethis=${DB_EXISTS(omnibus/${exte_est})})
same => n,Gotoif($[${statethis}]?:dec)					;se NÃO existe incrementa
same => n,GotoIf($[${state} = UNAVAIL]?dec:)				;se NÃO disponivel incrementa
same => n,Set(deviceadd=${HINT(8${exte_est}@omnibus)}&)			;comentar para não integrar a prox estação guarnecida
same => n(makeconf),Set(exte_pn_max=$[${exte_est}+1000])		;define o intrevalo de procura de PN's guarnecidas entre ${exte_pn_init} e ${exte_pn_max}
									;ultima estação guarnecida detectada e intervalo de num pn estabelecido
same => n(decpn),Set(exte_pn_init=$[${exte_pn_init}-1])
same => n(test_pn),GotoIf($[${exte_pn_init} < 2000]?doit:)		;testa numero máximo de iterações para não pendurar 1999 só liga para est 3000 liga est e pn
same => n,Set(comp=$[${exte_pn_init} >= ${exte_pn_max}])
same => n,GotoIf(${comp})?:doit)					;salta do ciclo de inc
same => n,GotoIf($[${DB_EXISTS(omnibus/${exte_pn_init})}])?:decpn)	;se NÃo existe incrementa e menor que pn_max
same => n,GotoIf($[${DB(omnibus/${exte_pn_init})}= UNAVAIL])?decpn:)	;se NÃO disponivel incrementa
same => n,Set(deviceadd=${deviceadd}${HINT(8${exte_pn_init}@omnibus)}&)
same => n,NoOp(limite max ${exte_pn_max} limite minimo ${exte_pn_init})
same => n,Set(comp=$[${exte_pn_init} >= ${exte_pn_max}])
same => n,GotoIf(${comp})?decpn:)
same => n(doit),Set(strip=$[${LEN(${deviceadd})} - 1])
same => n,GotoIf($[${strip} < 5])?omnibus,u,1:)
same => n,Set(deviceadd=${deviceadd:0:${strip}})
same => n,Page(${deviceadd},dri,60)
same => n,Hangup()

[omnibus-pn-conf]
exten => s,1,Verbose(2,A ligar para as estações guarnecidas adjacentes)
same => n(vizup),Set(exte=$[${CALLERID(num)}-1000])
same => n(inc),Set(exte=$[${exte}+1])
same => n(testup),GotoIf($[${exte} > ${testeiter}]?omnibus,u,1:)	;testa numero máximo de iterações para não pendurar 1999 só liga para est 3000 liga est e pn
same => n,Set(state=${DB(omnibus/${exte})})
same => n,GotoIf($[${DB_EXISTS(omnibus/${exte})}])?:inc)		;se NÃo existe decrementa
same => n,GotoIf($[${state} = UNAVAIL]?inc:)
same => n,Set(extup=${exte})
same => n(vzdn),Set(exte=$[${CALLERID(num)}-1000])
same => n(dec),Set(exte=$[${exte}-1])
same => n(testdn),GotoIf($[${exte} < 1000]?omnibus,u,1:)		;testa numero máximo de iterações para não pendurar 1999 só liga para est 3000 liga est e pn
same => n,Set(state=${DB(omnibus/${exte})})
same => n,GotoIf($[${DB_EXISTS(omnibus/${exte})}])?:dec)		;se NÃo existe decrementa
same => n,GotoIf($[${state} = UNAVAIL]?dec:)
same => n,Set(extdn=${exte})
same => n,Set(deviceup=${HINT(8${extup}@omnibus)})
same => n,Set(devicedn=${HINT(8${extdn}@omnibus)})
same => n,Set(pnconf=${deviceup}&${devicedn})
same => n,Page(${pnconf},dri,60)
same => n,Hangup()

[omnibus-sonor]
exten => s,1,WaitExten(6)

exten => 1003/1000,1,,SoftHangup(${CHE},a)		;desliga anuncios que estejam a decorrer. prioridade ao supervisor
same => n,Goto(3003,1)

exten => 3003,1,GotoIf($["${DEVICE_STATE(${CHE})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Page(${CHE},irA(tt-weasels),30)
same => n,Progress()
same => n,Hangup()

exten => 1012/1000,1,,SoftHangup(${CHE},a)
same => n,Goto(3012,1)

exten => 3012,1,GotoIf($["${DEVICE_STATE(${CHE})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Page(${CHE},irA(tt-weasels),30)
same => n,Progress()
same => n,Hangup()

exten => 1018/1000,1,,SoftHangup(${CHE3},a)
same => n,Goto(3018,1)

exten => 3018,1,GotoIf($["${DEVICE_STATE(${CHE3})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Page(${CHE3},irA(tt-weasels),30)
same => n,Progress()
same => n,Hangup()

exten => 1024/1000,1,,SoftHangup(${CHE},a)
same => n,Goto(3024,1)

exten => 3024,1,GotoIf($["${DEVICE_STATE(${CHE})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Page(${CHE},irA(tt-weasels),30)
same => n,Progress()
same => n,Hangup()

[recordservices]
exten => s,1,Playback(vm-intro)
same => n,Set(recordname=${TIMESTAMP}.wav)
same => n,Record(${recordname})
same => n,Wait(2)
same => n,Playback(${recordname})
same => n,Wait(1)
same => n,Hangup()

[omnibus-sos]
exten => emerg,1,NoOp(Chamada de emergência)
same => n,Verbose(2,Chamada de emergencia ${CHANNEL(from)}-${CALLERID(all)})
same => n,GotoIf($["${DEVICE_STATE(${CCOTRAFFIC})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,SoftHangup(${CCOTRAFFIC},a)		;TODO implementar a prioridade desligando todas as chamadas se existirem
;TODO em vez de desligar colocar onhold
same => n,GoSub(recordcall,s,1())
same => n,SIPAddHeader(call-info:info=alert-autoanswer)
same => n,Dial(${CCOTRAFFIC},90)		;TODO play annouce of emerg to caller
same => n,Progress()
same => n,Hangup()
;TODO detecção de voz ao fim de x. if not voice retoma chamadas ou callback
;TODO if hangup in less than x time retoma chamadas ou callback

[omnibus-escut]
exten => s,1,WaitExten(6)
same => n,ExtenSpy(${EXTEN}@omnibus,bEorS)
same => n,Hangup()

